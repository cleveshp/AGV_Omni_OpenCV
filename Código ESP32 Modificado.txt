#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include "esp_camera.h"


#include "esp_timer.h"
#include "img_converters.h"
#include "camera_index.h"
#include "Arduino.h"


const char* ssid = "ClevesHP_2G"; // Nome da sua rede Wi-Fi
const char* password = "claudio1"; // Senha da sua rede Wi-Fi



const int Forward       = 92;                               // 前进
const int Backward      = 163;                              // 后退
const int Turn_Left     = 149;                              // 左平移
const int Turn_Right    = 106;                              // 右平移
const int Top_Left      = 20;                               // 左上移动
const int Bottom_Left   = 129;                              // 左下移动
const int Top_Right     = 72;                               // 右上移动
const int Bottom_Right  = 34;                               // 右下移动
const int Stop          = 0;                                // 停止
// const int Contrarotate  = 172;                              // 逆时针旋转
const int Clockwise     = 83;                               // 顺时针旋转
const int Moedl1        = 25;                               // 模式1
const int Moedl2        = 26;                               // 模式2
const int Moedl3        = 27;                               // 模式3
const int Moedl4        = 28;                               // 模式4
const int Visao         = 29;                               // Modelo com sistema de visão
const int MotorLeft     = 230;                              // 舵机左转
const int MotorRight    = 231;                              // 舵机右转



#define CAMERA_MODEL_AI_THINKER

#define PWDN_GPIO_NUM 32
#define RESET_GPIO_NUM -1
#define XCLK_GPIO_NUM 0
#define SIOD_GPIO_NUM 26
#define SIOC_GPIO_NUM 27

#define Y9_GPIO_NUM 35
#define Y8_GPIO_NUM 34
#define Y7_GPIO_NUM 39
#define Y6_GPIO_NUM 36
#define Y5_GPIO_NUM 21
#define Y4_GPIO_NUM 19
#define Y3_GPIO_NUM 18
#define Y2_GPIO_NUM 5
#define VSYNC_GPIO_NUM 25
#define HREF_GPIO_NUM 23
#define PCLK_GPIO_NUM 22


// GPIO Setting
extern int gpLed = 4; // Light
extern String WiFiAddr = "";

float valor_ana_01;
float valor_ana_02;
float valor_ana_03;


AsyncWebServer server(80);
void startCameraServer();

void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
	Serial.println();

	pinMode(gpLed, OUTPUT); // Light
	digitalWrite(gpLed, LOW);

	camera_config_t config;
	config.ledc_channel = LEDC_CHANNEL_0;
	config.ledc_timer = LEDC_TIMER_0;
	config.pin_d0 = Y2_GPIO_NUM;
	config.pin_d1 = Y3_GPIO_NUM;
	config.pin_d2 = Y4_GPIO_NUM;
	config.pin_d3 = Y5_GPIO_NUM;
	config.pin_d4 = Y6_GPIO_NUM;
	config.pin_d5 = Y7_GPIO_NUM;
	config.pin_d6 = Y8_GPIO_NUM;
	config.pin_d7 = Y9_GPIO_NUM;
	config.pin_xclk = XCLK_GPIO_NUM;
	config.pin_pclk = PCLK_GPIO_NUM;
	config.pin_vsync = VSYNC_GPIO_NUM;
	config.pin_href = HREF_GPIO_NUM;
	config.pin_sscb_sda = SIOD_GPIO_NUM;
	config.pin_sscb_scl = SIOC_GPIO_NUM;
	config.pin_pwdn = PWDN_GPIO_NUM;
	config.pin_reset = RESET_GPIO_NUM;
	config.xclk_freq_hz = 20000000;
	config.pixel_format = PIXFORMAT_JPEG;
	// init with high specs to pre-allocate larger buffers
	if (psramFound())
	{
		config.frame_size = FRAMESIZE_HVGA;/*	FRAMESIZE_96X96,    // 96x96
												FRAMESIZE_QQVGA,    // 160x120
												FRAMESIZE_QCIF,     // 176x144
												FRAMESIZE_HQVGA,    // 240x176
												FRAMESIZE_240X240,  // 240x240
												FRAMESIZE_QVGA,     // 320x240
												FRAMESIZE_CIF,      // 400x296
												FRAMESIZE_HVGA,     // 480x320
												FRAMESIZE_VGA,      // 640x480
												FRAMESIZE_SVGA,     // 800x600
												FRAMESIZE_XGA,      // 1024x768
												FRAMESIZE_HD,       // 1280x720
												FRAMESIZE_SXGA,     // 1280x1024
												FRAMESIZE_UXGA,     // 1600x1200*/
		config.jpeg_quality = 10;		/*It could be anything between 0 and 63.The smaller the number, the higher the quality*/
		config.fb_count = 2;
		Serial.println("FRAMESIZE_HVGA");
	}
	else
	{
		config.frame_size = FRAMESIZE_CIF;
		config.jpeg_quality = 12;
		config.fb_count = 1;
		Serial.println("FRAMESIZE_QVGA");
	}

	// camera init
	esp_err_t err = esp_camera_init(&config);
	if (err != ESP_OK)
	{
		Serial.printf("Camera init failed with error 0x%x", err);
		return;
	}

	// drop down frame size for higher initial frame rate
	sensor_t *s = esp_camera_sensor_get();
	s->set_framesize(s, FRAMESIZE_CIF);


  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  Serial.println("Connected to WiFi");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    if (request->hasParam("analog1") && request->hasParam("analog2") && request->hasParam("analog3")) {
      int analogValue1 = request->getParam("analog1")->value().toInt();
      int analogValue2 = request->getParam("analog2")->value().toInt();
      int analogValue3 = request->getParam("analog3")->value().toInt();
      request->send(200, "text/plain", "Analog values received");
      valor_ana_01=analogValue1;
      valor_ana_02=analogValue2;
      valor_ana_03=analogValue3;
    } else {
      request->send(400, "text/plain", "Missing analog values");
    }
  });

  server.begin();
  startCameraServer();
  WiFiAddr = WiFi.localIP().toString();
}
//byte txdata[3] = {0xA5, 0, 0x5A};
//byte buf[6]={0xA5,0,0,0,0,0x5A};
void loop() 
{
  // Seu código principal aqui (se houver)
  // Envie os valores pela porta serial
  Serial.println(valor_ana_01);
  Serial.print(",");
  Serial.println(valor_ana_02);
  Serial.print(",");
  Serial.println(valor_ana_03);
  delay(500);
}